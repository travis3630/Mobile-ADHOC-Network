[General]
network = manet
#record-eventlog = true
# debug-on-errors = true

*.numHosts = 7
sim-time-limit = 1000s

repeat = 90
seed-set = ${repetition} # this is the default 
#${runnumber}
experiment-label = "${configname}"
measurement-label = "DYMO-10K-Mobility-1000s"#"Mobility and Different Targets"#-${iterationvars}"
replication-label = "#${repetition}"
#,seed-set=<seedset>"
**.vector-recording = true
**.radio.packetErrorRate.result-recording-modes = +vector
**.radio.bitErrorRate.result-recording-modes = +vector
**.radio.minSnir.result-recording-modes = +vector
num-rngs = 10 # available seeds to generate different random numbers

tkenv-plugin-path = ../../../etc/plugins
**.constraintAreaMinX = 440m
**.constraintAreaMaxX = 1900m
**.constraintAreaMinY = 0m
**.constraintAreaMaxY = 2000m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxZ = 1000m

**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2

[Config Dynamic]
description = MANET network ,tune the paramter in the code.


# Mobility of Nodes
**.host[0].mobility.typename = "TurtleMobility"
**.host[1].mobility.typename = "AnsimMobility"
**.host[0].mobility.turtleScript = xmldoc("move0.xml")
**.host[1].mobility.ansimTrace = xmldoc("ansimtrace.xml")
**.host[1].mobility.nodeId = 1
**.host[2..6].mobility.typename = "StationaryMobility"
**.host[2..6].mobility.initFromDisplayString = false
#**.host[0].mobility.initialX = 450m
#**.host[0].mobility.initialY = 200m
#**.host[1].mobility.initialX = 1760m
#**.host[1].mobility.initialY = 900m
**.host[2].mobility.initialX = 900m
**.host[2].mobility.initialY = 500m
**.host[3].mobility.initialX = 1400m
**.host[3].mobility.initialY = 490m
**.host[4].mobility.initialX = 1700m
**.host[4].mobility.initialY = 350m
**.host[5].mobility.initialX = 1320m
**.host[5].mobility.initialY = 750m
**.host[6].mobility.initialX = 930m
**.host[6].mobility.initialY = 650m

## Application Layer
*.host[*].hasStatus = true
**.host[0].numApps=1
**.host[1].numApps=1
**.host[0].app[0].typename="UdpBasicApp" # + 1 source
**.host[0].app[0].destPort = 5001
**.host[0].app[0].messageLength = 10000B
**.host[0].app[0].destAddresses = moduleListByPath("**.host[1]")   
**.host[1].app[0].localPort = 5001
**.host[1].app[0].typename="UdpSink" # + 1 source
**.app[*].sendInterval = 0.5s+uniform(-0.02s,0.02s)
#**.host[*].app[0].burstDuration = 5s
#**.host[*].app[0].sleepDuration = 0.25s
#*.host[0].app[0].destAddr = "host[1](ipv4)"



# MAC settings
*.host*.wlan[0].mac.headerLength = 23B
**.host[*].wlan[*].radio.receiver.errorModelType = "StochasticErrorModel"
**.host[*].wlan[*].radio.receiver.errorModel.bitErrorRate = 0.00000001
#**host[*].wlan[*].**.bitrate = 2Mbps
#*.host[*].wlan[*].mac.*.rateSelection.dataFrameBitrate = 2Mbps
*.host[*].wlan[*].opMode = "g(erp)"
*.host[*].wlan[*].mac.*.rateControl.typename = ${rateControl="", "ArfRateControl"}
#**.wlan[*].mgmt.typename = "Ieee80211MgmtAdhoc"
#**.wlan[*].agent.typename = ""
*.host[*].networkLayer.arp.typename = "GlobalArp"
#**.bitrate = ${bitrate=5}Mbps
#**.bitrate = ${bitrate=6,9,12,18,24,36,48,54}Mbps
*.host[*].wlan[*].mac.*.rateControl.initialRate = 54Mbps
#*.host[*].wlan[*].mac.dataBitrate = (${rateControl} == "" ? 54Mbps : -1bps)	# use 54Mbps rate when not using rate control, and let ratecontrol set the rate when using
*.host[*].wlan[*].mac.*.rateSelection.dataFrameBitrate = (${rateControl} == "" ? 54Mbps : -1bps)   # use 54Mbps rate when not using rate control, and let ratecontrol set the rate when using
#*.host[*].wlan[*].mac.dcf.rateControl.increaseThreshold = 2
#*.host[*].wlan[*].mac.dcf.rateControl.decreaseThreshold = 1
#*.host[*].wlan[*].mac.dcf.rateControl.interval = 1s
#**.wlan[*].mgmt.frameCapacity = 10
#**.wlan[*].mac.address = "auto"
#**.wlan[*].mac.maxQueueSize = 14
#**.wlan[*].mac.rtsThresholdBytes = 3000B
#**.wlan[*].mac.retryLimit = 10
#**.wlan[*].mac.cwMinData = 7
#**.wlan[*].mac.cwMinMulticast = 31

# Physical Layer Setting
**.wlan[*].radio.transmitter.power = 15.0mW # -20 dBm
*.host[*].wlan[*].radio.receiver.ignoreInterference = false
#*.host[0].wlan[*].radio.antenna.typename = "ParabolicAntenna"
#*.host[0].wlan[*].radio.antenna.beamWidth = 30deg
#*.host[0].wlan[*].radio.antenna.maxGain = 10dB
#*.host[0].wlan[*].radio.antenna.minGain = -50dB
**.radio.bandwidth = 20MHz
**.radio.centerFrequency = 2.45GHz
**.radio.channelNumber = 8

#**.radio.receiver.energyDetection = -50dBm
#**.radio.receiver.sensitivity = -70dBm
#**.radio.receiver.snirThreshold = -6dB





####	Energy consumption	####
*.host[*].energyStorage.typename = "SimpleEpEnergyStorage"
*.host[*].wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
*.host[*].energyManagement.typename = "SimpleEpEnergyManagement"
*.host[*].energyStorage.nominalCapacity = 5J
*.host[*].energyManagement.nodeShutdownCapacity = 0.1 * energyStorage.nominalCapacity
*.host[*].energyManagement.nodeStartCapacity = 0.5 * energyStorage.nominalCapacity
*.host[*].energyStorage.initialCapacity = uniform(0.6 * energyStorage.nominalCapacity, energyStorage.nominalCapacity)
#*.host[*].wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
*.host[*].wlan[*].radio.energyConsumer.sleepPowerConsumption = 0.1mW
*.host[*].wlan[*].radio.energyConsumer.receiverIdlePowerConsumption = 4mW
*.host[*].wlan[*].radio.energyConsumer.receiverBusyPowerConsumption = 10mW
*.host[*].wlan[*].radio.energyConsumer.receiverReceivingPowerConsumption = 20mW
*.host[*].wlan[*].radio.energyConsumer.transmitterIdlePowerConsumption = 4mW
*.host[*].wlan[*].radio.energyConsumer.transmitterTransmittingPowerConsumption = 200mW # continue previous line

#### physical enviroment ########
**.backgroundNoise.power = -110dBm
*.physicalEnvironment.config = xmldoc("walls.xml")
*.physicalEnvironment.ground.typename = "FlatGround"
*.radioMedium.pathLoss.typename = "LogNormalShadowing"
*.radioMedium.pathLoss.sigma = 9
*.radioMedium.obstacleLoss.typename = "DielectricObstacleLoss"

#### Visualizer #####
*.visualizer.sceneVisualizer.descriptionFigure = default
#*.visualizer.mediumVisualizer.displaySignals = true
*.visualizer.networkRouteVisualizer.displayRoutes = true
*.visualizer.mediumVisualizer.displaySignals = false
*.visualizer.physicalLinkVisualizer.packetFilter = "UDP*"
#*.visualizer.obstacleLossVisualizer.displayIntersections = true
#**.wlan[*].radio.transmitter.communicationRange = 25m
#*.visualizer.*.statisticVisualizer.signalName = "packetSentToUpper"
#*.visualizer.*.statisticVisualizer.statisticExpression = "packetErrorRate"
#*.visualizer.*.statisticVisualizer.sourceFilter = "*.destination.wlan[*].radio"
#*.visualizer.*.statisticVisualizer.format = "packetErrorRate: %v"
*.visualizer.sceneVisualizer.descriptionFigure = "title"
*.visualizer.networkRouteVisualizer.packetFilter = "*UdpBasicAppData*"
*.visualizer.mediumVisualizer.signalPropagationUpdateInterval = 100ns
*.host[0..1].wlan[*].radio.displayCommunicationRange = true
#*.visualizer.physicalLinkVisualizer.packetNameFilter = "UDPData*"
*.visualizer.mobilityVisualizer.displayMovementTrail = true
*.configurator.addStaticRoutes = false
#*.visualizer.mediumVisualizer.displaySignalArrivals = true   #### to display signal arrival
#*.visualizer.mediumVisualizer.displaySignalDepartures = true
#*.visualizer.dataLinkVisualizer.packetFilter = "*UdpBasicAppData*"

